volumes:
  pg_data_autenticacion:
  pg_data_solicitudes:

networks:
  crediya_net:

services:
  # ===================== AUTENTICACIÓN =====================
  # ===================== DB
  postgres-autenticacion:
    image: postgres:17
    ports:
      - "${AUTENTICACION_DB_HOST_PORT}:${AUTENTICACION_DB_INTERNAL_PORT}"
    environment:
      POSTGRES_DB:              ${AUTENTICACION_DB}
      POSTGRES_USER:            ${SOLICITUDES_SPRING_R2DBC_USERNAME}
      POSTGRES_PASSWORD:        ${SOLICITUDES_SPRING_R2DBC_PASSWORD}
    volumes:
      - pg_data_autenticacion:/var/lib/postgresql/data
      - ./Autenticacion/deployment/db/init:/docker-entrypoint-initdb.d:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $AUTENTICACION_SPRING_R2DBC_USERNAME -d $AUTENTICACION_DB"]
      interval: 5s
      timeout: 3s
      retries: 10
    networks: [crediya_net]

  # ===================== APP
  app-autenticacion:
    image: crediya/autenticacion:1.0.0
    build:
      context: ./Autenticacion
      dockerfile: deployment/Dockerfile
    env_file:
      - .env
    environment:
      # Server
      SERVER_PORT:              ${AUTENTICACION_SERVER_PORT}
      PROFILE_ACTIVE:           ${PROFILE_ACTIVE}

      # DB
      SPRING_R2DBC_URL:         ${AUTENTICACION_SPRING_R2DBC_URL}
      SPRING_R2DBC_USERNAME:    ${AUTENTICACION_SPRING_R2DBC_USERNAME}
      SPRING_R2DBC_PASSWORD:    ${AUTENTICACION_SPRING_R2DBC_PASSWORD}

      # Rutas
      ROUTE_USUARIO:            ${ROUTE_USUARIO}
      ROUTE_AUTENTICACION:      ${ROUTE_AUTENTICACION}

      # CORS / JWT
      JWT_SECRET:               ${JWT_SECRET}
      JWT_EXPIRATION:           ${JWT_EXPIRATION}
      CORS_ALLOWED_ORIGINS:     ${CORS_ALLOWED_ORIGINS}

    ports:
      - "${AUTENTICACION_SERVER_PORT}:${AUTENTICACION_SERVER_PORT}"
    networks: [crediya_net]



  # ===================== SOLICITUDES =====================
  # ===================== DB
  postgres-solicitudes:
    image: postgres:17
    ports:
      - "${SOLICITUDES_DB_HOST_PORT}:${SOLICITUDES_DB_INTERNAL_PORT}"
    environment:
      POSTGRES_DB:                                ${SOLICITUDES_DB}
      POSTGRES_USER:                              ${SOLICITUDES_SPRING_R2DBC_USERNAME}
      POSTGRES_PASSWORD:                          ${SOLICITUDES_SPRING_R2DBC_PASSWORD}
    volumes:
      - pg_data_solicitudes:/var/lib/postgresql/data
      - ./Solicitudes/deployment/db/init:/docker-entrypoint-initdb.d:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $SOLICITUDES_SPRING_R2DBC_USERNAME -d $SOLICITUDES_DB"]
      interval: 5s
      timeout: 3s
      retries: 10
    networks: [crediya_net]

  # ===================== APP
  app-solicitudes:
    image: crediya/solicitudes:1.0.0
    build:
      context: ./Solicitudes
      dockerfile: deployment/Dockerfile
    env_file:
      - .env
    environment:
      # Server
      SERVER_PORT:                                ${SOLICITUDES_SERVER_PORT}
      PROFILE_ACTIVE:                             ${PROFILE_ACTIVE}

      # DB
      SPRING_R2DBC_URL:                           ${SOLICITUDES_SPRING_R2DBC_URL}
      SPRING_R2DBC_USERNAME:                      ${SOLICITUDES_SPRING_R2DBC_USERNAME}
      SPRING_R2DBC_PASSWORD:                      ${SOLICITUDES_SPRING_R2DBC_PASSWORD}

      # Rutas
      ROUTE_SOLICITUD:                            ${ROUTE_SOLICITUD}

      # CORS / JWT
      JWT_SECRET:                                 ${JWT_SECRET}
      JWT_SECRET_IS_BASE64:                       ${JWT_SECRET_IS_BASE64}
      CORS_ALLOWED_ORIGINS:                       ${CORS_ALLOWED_ORIGINS}

      # Endpoint interno hacia Autenticación
      WEBCLIENT_MICRO_AUTENTICACION:              ${WEBCLIENT_MICRO_AUTENTICACION}

      #AWS
      AWS_REGION:                                 ${AWS_REGION}
      AWS_ACCESS_KEY_ID:                          ${AWS_ACCESS_KEY}
      AWS_SECRET_ACCESS_KEY:                      ${AWS_SECRET_KEY}

      SQS_SOLICITUD_ACTUALIZADA:                  ${SQS_SOLICITUD_ACTUALIZADA}
      SQS_CAPACIDAD_ENDEUDAMIENTO:                ${SQS_CAPACIDAD_ENDEUDAMIENTO}
      SQS_SOLICITUD_ACTUALIZADA_AUTOMATICAMENTE:  ${SQS_SOLICITUD_ACTUALIZADA_AUTOMATICAMENTE}
      SQS_REPORTE_SOLICITUD_APROBADA:             ${SQS_REPORTE_SOLICITUD_APROBADA}

    ports:
      - "${SOLICITUDES_SERVER_PORT}:${SOLICITUDES_SERVER_PORT}"
    networks: [crediya_net]



  # ===================== SOLICITUDES =====================
  # ===================== APP
  app-reportes:
    image: crediya/reportes:1.0.0
    build:
      context: ./Reporte
      dockerfile: deployment/Dockerfile
    env_file:
      - .env
    environment:
      # Server
      SERVER_PORT:                            ${REPORTES_SERVER_PORT}
      PROFILE_ACTIVE:                         ${PROFILE_ACTIVE}

      # DB
      DYNAMO_DB_REPORTES_URL:                 ${DYNAMO_DB_REPORTES_URL}

      # Rutas
      ROUTE_REPORTES:                         ${ROUTE_REPORTES}

      # CORS / JWT
      JWT_SECRET:                             ${JWT_SECRET}
      JWT_SECRET_IS_BASE64:                   ${JWT_SECRET_IS_BASE64}
      CORS_ALLOWED_ORIGINS:                   ${CORS_ALLOWED_ORIGINS}

      #AWS
      AWS_REGION:                             ${AWS_REGION}
      AWS_ACCESS_KEY_ID:                      ${AWS_ACCESS_KEY}
      AWS_SECRET_ACCESS_KEY:                  ${AWS_SECRET_KEY}

      SQS_QUEUES_REPORTE_SOLICITUD_APROBADA:  ${SQS_REPORTE_SOLICITUD_APROBADA}

    ports:
      - "${REPORTES_SERVER_PORT}:${REPORTES_SERVER_PORT}"
    networks: [ crediya_net ]

