volumes:
  pg_data_autenticacion:
  pg_data_solicitudes:

networks:
  crediya_net:

services:
  # ===================== AUTENTICACIÓN =====================
  postgres-autenticacion:
    image: postgres:17
    ports:
      - "${AUTENTICACION_DB_HOST_PORT}:${AUTENTICACION_DB_INTERNAL_PORT}"
    environment:
      POSTGRES_DB:              ${AUTENTICACION_DB}
      POSTGRES_USER:            ${AUTENTICACION_DB_USER}
      POSTGRES_PASSWORD:        ${AUTENTICACION_DB_PASSWORD}
    volumes:
      - pg_data_autenticacion:/var/lib/postgresql/data
      - ./Autenticacion/deployment/db/init:/docker-entrypoint-initdb.d:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $AUTENTICACION_DB_USER -d $AUTENTICACION_DB"]
      interval: 5s
      timeout: 3s
      retries: 10
    networks: [crediya_net]

  app-autenticacion:
    image: crediya/autenticacion:1.0.0
    build:
      context: ./Autenticacion
      dockerfile: deployment/Dockerfile
    env_file:
      - .env
    environment:
      # Server
      SERVER_PORT:              ${AUTENTICACION_SERVER_PORT}
      PROFILE_ACTIVE:           ${PROFILE_ACTIVE}

      # BD
      SPRING_R2DBC_URL:         ${SPRING_R2DBC_URL}
      SPRING_R2DBC_USERNAME:    ${SPRING_R2DBC_USERNAME}
      SPRING_R2DBC_PASSWORD:    ${SPRING_R2DBC_PASSWORD}

      # Rutas
      ROUTE_USUARIO:            ${ROUTE_USUARIO}
      ROUTE_AUTENTICACION:      ${ROUTE_AUTENTICACION}

      # CORS / JWT
      JWT_SECRET:               ${JWT_SECRET}
      JWT_EXPIRATION:           ${JWT_EXPIRATION}
      CORS_ALLOWED_ORIGINS:     ${CORS_ALLOWED_ORIGINS}

    ports:
      - "${AUTENTICACION_SERVER_PORT}:${AUTENTICACION_SERVER_PORT}"
    networks: [crediya_net]









  # ===================== SOLICITUDES =====================
  postgres-solicitudes:
    image: postgres:17
    ports:
      - "${SOLICITUDES_POSTGRES_HOST_PORT}:${SOLICITUDES_POSTGRES_PORT}"
    environment:
      POSTGRES_DB:            ${SOLICITUDES_POSTGRES_DB}
      POSTGRES_USER:          ${SOLICITUDES_POSTGRES_USER}
      POSTGRES_PASSWORD:      ${SOLICITUDES_POSTGRES_PASSWORD}
    volumes:
      - pg_data_solicitudes:/var/lib/postgresql/data
      - ./Solicitudes/deployment/db/init:/docker-entrypoint-initdb.d:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $SOLICITUDES_POSTGRES_USER -d $SOLICITUDES_POSTGRES_DB"]
      interval: 5s
      timeout: 3s
      retries: 10
    networks: [crediya_net]

  app-solicitudes:
    image: crediya/solicitudes:1.0.0
    build:
      context: ./Solicitudes
      dockerfile: deployment/Dockerfile
    env_file:
      - .env
    environment:
      # Server
      SERVER_PORT:            ${SOLICITUDES_SERVER_PORT}

      # CORS / JWT
      CORS_ALLOWED_ORIGINS:   ${CORS_ALLOWED_ORIGINS}
      JWT_SECRET:             ${JWT_SECRET}
      JWT_SECRET_IS_BASE64:   ${JWT_SECRET_IS_BASE64}

      # Rutas
      ROUTE_SOLICITUD:        ${ROUTE_SOLICITUD}

      # Endpoint interno hacia Autenticación
      WEBCLIENT_MICRO_AUTENTICACION: "http://app-autenticacion:${AUTENTICACION_SERVER_PORT}${ROUTE_USUARIO}"

      # R2DBC
      SPRING_R2DBC_URL: r2dbc:postgresql://${SOLICITUDES_POSTGRES_HOST}:5432/${SOLICITUDES_POSTGRES_DB}
      SPRING_R2DBC_USERNAME:  ${SOLICITUDES_POSTGRES_USER}
      SPRING_R2DBC_PASSWORD:  ${SOLICITUDES_POSTGRES_PASSWORD}

      #AWS
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_KEY}
      AWS_REGION: ${AWS_REGION}

      SQS_SOLICITUD_ACTUALIZADA:   ${SQS_SOLICITUD_ACTUALIZADA}
      SQS_CAPACIDAD_ENDEUDAMIENTO: ${SQS_CAPACIDAD_ENDEUDAMIENTO}
      SQS_SOLICITUD_ACTUALIZADA_AUTOMATICAMENTE: ${SQS_SOLICITUD_ACTUALIZADA_AUTOMATICAMENTE}
      SQS_REPORTE_SOLICITUD_APROBADA: ${SQS_REPORTE_SOLICITUD_APROBADA}

    depends_on:
      postgres-solicitudes:
        condition: service_healthy
    ports:
      - "${SOLICITUDES_SERVER_PORT}:${SOLICITUDES_SERVER_PORT}"
    networks: [crediya_net]

  # ===================== SOLICITUDES =====================
  app-reportes:
    image: crediya/reportes:1.0.0
    build:
      context: ./Reporte
      dockerfile: deployment/Dockerfile
    env_file:
      - .env
    environment:
      # Server
      SERVER_PORT:              ${REPORTES_SERVER_PORT}

      # CORS / JWT
      CORS_ALLOWED_ORIGINS:     ${CORS_ALLOWED_ORIGINS}
      JWT_SECRET:               ${JWT_SECRET}
      JWT_SECRET_IS_BASE64:     ${JWT_SECRET_IS_BASE64}

      # Rutas
      ROUTE_REPORTES: ${ROUTE_REPORTES}

      #AWS
      AWS_ACCESS_KEY_ID:        ${AWS_ACCESS_KEY}
      AWS_SECRET_ACCESS_KEY:    ${AWS_SECRET_KEY}
      AWS_REGION:               ${AWS_REGION}

      SQS_QUEUES_REPORTE_SOLICITUD_APROBADA: ${SQS_REPORTE_SOLICITUD_APROBADA}

      DYNAMO_DB_REPORTES_URL:     ${DYNAMO_DB_REPORTES_URL}
      SPRING_PROFILES_ACTIVE:     ${PROFILE_ACTIVE}


    ports:
      - "${REPORTES_SERVER_PORT}:${REPORTES_SERVER_PORT}"
    networks: [ crediya_net ]

